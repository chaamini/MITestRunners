{
	"info": {
		"_postman_id": "23c14b4b-adc1-47c2-a6b8-488f5d7ac0df",
		"name": "Devry_TestScore",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "20922221"
	},
	"item": [
		{
			"name": "SuccessfulInvocation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 2000ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"pm.test(\"Validate the schema of the response\", function () {",
							"  const responseData = xml2Json(pm.response.text());",
							"  ",
							"  pm.expect(responseData).to.have.property('soapenv:Envelope');",
							"  pm.expect(responseData['soapenv:Envelope']).to.be.an('object');",
							"  pm.expect(responseData['soapenv:Envelope']).to.have.property('soapenv:Body');",
							"  pm.expect(responseData['soapenv:Envelope']['soapenv:Body']).to.be.an('object');",
							"  pm.expect(responseData['soapenv:Envelope']['soapenv:Body']).to.have.property('ChecklistResponse');",
							"  pm.expect(responseData['soapenv:Envelope']['soapenv:Body']['ChecklistResponse']).to.be.an('object');",
							"  pm.expect(responseData['soapenv:Envelope']['soapenv:Body']['ChecklistResponse']).to.have.property('$');",
							"  pm.expect(responseData['soapenv:Envelope']['soapenv:Body']['ChecklistResponse']['$']).to.be.an('object');",
							"  pm.expect(responseData['soapenv:Envelope']['soapenv:Body']['ChecklistResponse']).to.have.property('status');",
							"  pm.expect(responseData['soapenv:Envelope']['soapenv:Body']['ChecklistResponse']).to.have.property('Desc');",
							"  pm.expect(responseData['soapenv:Envelope']['soapenv:Body']['ChecklistResponse']['status']).to.eql('Success');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": {
						"value": "eyJraWQiOiJnYXRld2F5X2NlcnRpZmljYXRlX2FsaWFzIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIyZTc1ZGNiNy0wZTU1LTRiZGYtODRkNC0zMTE3ZDNmN2M1ODVAY2FyYm9uLnN1cGVyIiwiYXVkIjoiY2hvcmVvOmRlcGxveW1lbnQ6c2FuZGJveCIsImlzcyI6Imh0dHBzOlwvXC9zdHMuY2hvcmVvLmRldjo0NDNcL2FwaVwvYW1cL3B1Ymxpc2hlclwvdjJcL2FwaXNcL2ludGVybmFsLWtleSIsImtleXR5cGUiOiJTQU5EQk9YIiwic3Vic2NyaWJlZEFQSXMiOlt7InN1YnNjcmliZXJUZW5hbnREb21haW4iOm51bGwsIm5hbWUiOiJiYW5uZXItdG8tc2ZkYy10ZXN0LXNjb3JlIC0gQmFubmVyVG9TRkRDVGVzdFNjb3Jlc1NlcnZpY2UiLCJjb250ZXh0IjoiXC8zOTI1ZjcxZC04ZWEwLTQzNzEtOTAyYy0wYjdiZWU2OWZlMTRcL3N0YW5kYWxvbmUtaW50ZWdyYXRpb25cL2Jhbm5lci10by1zZmRjLXRlc3Qtc2NvcmVcL3YxLjAiLCJwdWJsaXNoZXIiOiJjaG9yZW9fcHJvZF9hcGltX2FkbWluIiwidmVyc2lvbiI6InYxLjAiLCJzdWJzY3JpcHRpb25UaWVyIjpudWxsfV0sImV4cCI6MTczMDcyNzI1OCwidG9rZW5fdHlwZSI6IkludGVybmFsS2V5IiwiaWF0IjoxNzMwNzI2NjU4LCJqdGkiOiI4MjE0YmYxZi1jOGFmLTRkNWEtYTk0ZS1jYTE3MmZhMjNjOGUifQ.euRG2rz-6q223Nw5ogxosvBYjjRUuIe8MXhCzOEPdBIugo_wC3U2VhtfHRCuleTlsb7pdWp96sZIAzTFCqazsslVUOehFiepcQYJ_PRR_O-jyPWy9zFEIuzJrWpLeYXzq0tHXWfEW0i6nukG8fcvfGkhHKshO5UCVsHkywZ3gGnZph9OyXD9umg5KGdQvoPSPkpEYlZEIoNvn9bkiWi-Vs7FS7M2IHMqnqk4EjH9HNNP9m4Vpdz4jvOjDIlu0rWtiuEWbHollbpOENze_ql9KZqgZ5WiczJ884yIIo6krVCnFN-i4vhf9y0Lx7l4f605gX1Qhn0GadOwTOgRJDPCNso6KQkZ72gg5YeqI4IrSNmuoBQWxsrK-eFxUmUQBoZY8I_98Arkg6Fm-jzllZ2segcn5wVQvXco2jgyVxsfSukBnx0jFBzqb0e4WIaUfAF68nJokAqVazeyBoGn8jFnLO9qLa1K1BHUg-iRYYOu2VxtQ1GHiW4cW4mScKmi0GKsnLgHVlRhEyarq_T1eKdD_0jWJClqppFXgwUdn1R-4EwCmjBsfGyCGkay4y8sOLYeCii4z_cx6wdVXlAaiItyc4DtoEONKo6039vErrDX4RaZaArVOu-Ssvzwkq1mw0BctJ5gM4f9n7TSGU3sKcDoe6Z2ltABhO59lGJcDmkIxeA",
						"key": "api-key"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">\n   <soapenv:Header/>\n   <soapenv:Body>\n     <BannerIdentity xmlns=\"urn:sungardhe:banner:identity:1.0\">\n         <sourcedid>\n            <source>Banner</source>\n            <id>1317847</id>\n         </sourcedid>\n         <operation>UPDATE</operation>\n         <attributes>\n            <attribute>\n               <name>OBJECT_IDENTIFIER</name>\n               <value>SATURN.SORTEST</value>\n            </attribute>\n            <attribute>\n               <name>SORTEST_PIDM</name>\n               <value>1317847</value>\n            </attribute>\n            <attribute>\n               <name>SORTEST_TESC_CODE</name>\n               <value>OPAR</value>\n            </attribute>\n            <attribute>\n               <name>SORTEST_TEST_DATE</name>\n               <value>14-AUG-18</value>\n            </attribute>\n         </attributes>\n      </BannerIdentity>\n   </soapenv:Body>\n</soapenv:Envelope>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": "https://3925f71d-8ea0-4371-902c-0b7bee69fe14-dev.dv.dvy.choreoapis.dev/standalone-integration/banner-to-sfdc-test-score/v1.0/services/DVU_BannerToSFDCTestScoresAQ"
			},
			"response": []
		},
		{
			"name": "SuccessfulServiceInvocation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 2000ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"pm.test(\"Validate the schema of the response\", function () {",
							"  const responseData = xml2Json(pm.response.text());",
							"  ",
							"  pm.expect(responseData).to.have.property('soapenv:Envelope');",
							"  pm.expect(responseData['soapenv:Envelope']).to.be.an('object');",
							"  pm.expect(responseData['soapenv:Envelope']).to.have.property('soapenv:Body');",
							"  pm.expect(responseData['soapenv:Envelope']['soapenv:Body']).to.be.an('object');",
							"  pm.expect(responseData['soapenv:Envelope']['soapenv:Body']).to.have.property('ChecklistResponse');",
							"  pm.expect(responseData['soapenv:Envelope']['soapenv:Body']['ChecklistResponse']).to.be.an('object');",
							"  pm.expect(responseData['soapenv:Envelope']['soapenv:Body']['ChecklistResponse']).to.have.property('$');",
							"  pm.expect(responseData['soapenv:Envelope']['soapenv:Body']['ChecklistResponse']['$']).to.be.an('object');",
							"  pm.expect(responseData['soapenv:Envelope']['soapenv:Body']['ChecklistResponse']).to.have.property('status');",
							"  pm.expect(responseData['soapenv:Envelope']['soapenv:Body']['ChecklistResponse']).to.have.property('Desc');",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is 'text/xml'\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('text/xml; charset=utf-8');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": {
						"value": "eyJraWQiOiJnYXRld2F5X2NlcnRpZmljYXRlX2FsaWFzIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIyZTc1ZGNiNy0wZTU1LTRiZGYtODRkNC0zMTE3ZDNmN2M1ODVAY2FyYm9uLnN1cGVyIiwiYXVkIjoiY2hvcmVvOmRlcGxveW1lbnQ6c2FuZGJveCIsImlzcyI6Imh0dHBzOlwvXC9zdHMuY2hvcmVvLmRldjo0NDNcL2FwaVwvYW1cL3B1Ymxpc2hlclwvdjJcL2FwaXNcL2ludGVybmFsLWtleSIsImtleXR5cGUiOiJTQU5EQk9YIiwic3Vic2NyaWJlZEFQSXMiOlt7InN1YnNjcmliZXJUZW5hbnREb21haW4iOm51bGwsIm5hbWUiOiJiYW5uZXItdG8tc2ZkYy10ZXN0LXNjb3JlIC0gQmFubmVyVG9TRkRDVGVzdFNjb3Jlc1NlcnZpY2UiLCJjb250ZXh0IjoiXC8zOTI1ZjcxZC04ZWEwLTQzNzEtOTAyYy0wYjdiZWU2OWZlMTRcL3N0YW5kYWxvbmUtaW50ZWdyYXRpb25cL2Jhbm5lci10by1zZmRjLXRlc3Qtc2NvcmVcL3YxLjAiLCJwdWJsaXNoZXIiOiJjaG9yZW9fcHJvZF9hcGltX2FkbWluIiwidmVyc2lvbiI6InYxLjAiLCJzdWJzY3JpcHRpb25UaWVyIjpudWxsfV0sImV4cCI6MTczMDcyNzI1OCwidG9rZW5fdHlwZSI6IkludGVybmFsS2V5IiwiaWF0IjoxNzMwNzI2NjU4LCJqdGkiOiI4MjE0YmYxZi1jOGFmLTRkNWEtYTk0ZS1jYTE3MmZhMjNjOGUifQ.euRG2rz-6q223Nw5ogxosvBYjjRUuIe8MXhCzOEPdBIugo_wC3U2VhtfHRCuleTlsb7pdWp96sZIAzTFCqazsslVUOehFiepcQYJ_PRR_O-jyPWy9zFEIuzJrWpLeYXzq0tHXWfEW0i6nukG8fcvfGkhHKshO5UCVsHkywZ3gGnZph9OyXD9umg5KGdQvoPSPkpEYlZEIoNvn9bkiWi-Vs7FS7M2IHMqnqk4EjH9HNNP9m4Vpdz4jvOjDIlu0rWtiuEWbHollbpOENze_ql9KZqgZ5WiczJ884yIIo6krVCnFN-i4vhf9y0Lx7l4f605gX1Qhn0GadOwTOgRJDPCNso6KQkZ72gg5YeqI4IrSNmuoBQWxsrK-eFxUmUQBoZY8I_98Arkg6Fm-jzllZ2segcn5wVQvXco2jgyVxsfSukBnx0jFBzqb0e4WIaUfAF68nJokAqVazeyBoGn8jFnLO9qLa1K1BHUg-iRYYOu2VxtQ1GHiW4cW4mScKmi0GKsnLgHVlRhEyarq_T1eKdD_0jWJClqppFXgwUdn1R-4EwCmjBsfGyCGkay4y8sOLYeCii4z_cx6wdVXlAaiItyc4DtoEONKo6039vErrDX4RaZaArVOu-Ssvzwkq1mw0BctJ5gM4f9n7TSGU3sKcDoe6Z2ltABhO59lGJcDmkIxeA",
						"key": "api-key"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">\n   <soapenv:Header/>\n   <soapenv:Body>\n     <BannerIdentity xmlns=\"urn:sungardhe:banner:identity:1.0\">\n         <sourcedid>\n            <source>Banner</source>\n            <id>1317847</id>\n         </sourcedid>\n         <operation>UPDATE</operation>\n         <attributes>\n            <attribute>\n               <name>OBJECT_IDENTIFIER</name>\n               <value>SATURN.SORTEST</value>\n            </attribute>\n            <attribute>\n               <name>SORTEST_PIDM</name>\n               <value>1317847</value>\n            </attribute>\n            <attribute>\n               <name>SORTEST_TESC_CODE</name>\n               <value>OPAR</value>\n            </attribute>\n            <attribute>\n               <name>SORTEST_TEST_DATE</name>\n               <value>14-AUG-18</value>\n            </attribute>\n         </attributes>\n      </BannerIdentity>\n   </soapenv:Body>\n</soapenv:Envelope>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": "https://3925f71d-8ea0-4371-902c-0b7bee69fe14-dev.dv.dvy.choreoapis.dev/standalone-integration/banner-to-sfdc-test-score/v1.0/services/DVU_BannerToSFDCTestScoresAQ"
			},
			"response": []
		},
		{
			"name": "FailureInvocation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 2000ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/xml\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/xml\");",
							"});",
							"",
							"",
							"pm.test(\"ChecklistResponse object has the expected structure\", function () {",
							"    const responseData = xml2Json(pm.response.text());",
							"    ",
							"    pm.expect(responseData.ChecklistResponse).to.be.an('object');",
							"    pm.expect(responseData.ChecklistResponse.$).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.ChecklistResponse.status).to.exist;",
							"    pm.expect(responseData.ChecklistResponse.errorCode).to.exist;",
							"    pm.expect(responseData.ChecklistResponse.errorDesc).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Status, errorCode, and errorDesc are present in the response\", function () {",
							"    const responseData = xml2Json(pm.response.text());",
							"    ",
							"",
							"    pm.expect(responseData.ChecklistResponse.status).to.eql('Skip');",
							"    pm.expect(responseData.ChecklistResponse.errorCode).to.exist;",
							"    pm.expect(responseData.ChecklistResponse.errorDesc).to.eql('Invalid Test Codes, not in accepted Maxtrix list or MCAN test.');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": {
						"value": "eyJraWQiOiJnYXRld2F5X2NlcnRpZmljYXRlX2FsaWFzIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIyZTc1ZGNiNy0wZTU1LTRiZGYtODRkNC0zMTE3ZDNmN2M1ODVAY2FyYm9uLnN1cGVyIiwiYXVkIjoiY2hvcmVvOmRlcGxveW1lbnQ6c2FuZGJveCIsImlzcyI6Imh0dHBzOlwvXC9zdHMuY2hvcmVvLmRldjo0NDNcL2FwaVwvYW1cL3B1Ymxpc2hlclwvdjJcL2FwaXNcL2ludGVybmFsLWtleSIsImtleXR5cGUiOiJTQU5EQk9YIiwic3Vic2NyaWJlZEFQSXMiOlt7InN1YnNjcmliZXJUZW5hbnREb21haW4iOm51bGwsIm5hbWUiOiJiYW5uZXItdG8tc2ZkYy10ZXN0LXNjb3JlIC0gQmFubmVyVG9TRkRDVGVzdFNjb3Jlc1NlcnZpY2UiLCJjb250ZXh0IjoiXC8zOTI1ZjcxZC04ZWEwLTQzNzEtOTAyYy0wYjdiZWU2OWZlMTRcL3N0YW5kYWxvbmUtaW50ZWdyYXRpb25cL2Jhbm5lci10by1zZmRjLXRlc3Qtc2NvcmVcL3YxLjAiLCJwdWJsaXNoZXIiOiJjaG9yZW9fcHJvZF9hcGltX2FkbWluIiwidmVyc2lvbiI6InYxLjAiLCJzdWJzY3JpcHRpb25UaWVyIjpudWxsfV0sImV4cCI6MTczMDcyNzI1OCwidG9rZW5fdHlwZSI6IkludGVybmFsS2V5IiwiaWF0IjoxNzMwNzI2NjU4LCJqdGkiOiI4MjE0YmYxZi1jOGFmLTRkNWEtYTk0ZS1jYTE3MmZhMjNjOGUifQ.euRG2rz-6q223Nw5ogxosvBYjjRUuIe8MXhCzOEPdBIugo_wC3U2VhtfHRCuleTlsb7pdWp96sZIAzTFCqazsslVUOehFiepcQYJ_PRR_O-jyPWy9zFEIuzJrWpLeYXzq0tHXWfEW0i6nukG8fcvfGkhHKshO5UCVsHkywZ3gGnZph9OyXD9umg5KGdQvoPSPkpEYlZEIoNvn9bkiWi-Vs7FS7M2IHMqnqk4EjH9HNNP9m4Vpdz4jvOjDIlu0rWtiuEWbHollbpOENze_ql9KZqgZ5WiczJ884yIIo6krVCnFN-i4vhf9y0Lx7l4f605gX1Qhn0GadOwTOgRJDPCNso6KQkZ72gg5YeqI4IrSNmuoBQWxsrK-eFxUmUQBoZY8I_98Arkg6Fm-jzllZ2segcn5wVQvXco2jgyVxsfSukBnx0jFBzqb0e4WIaUfAF68nJokAqVazeyBoGn8jFnLO9qLa1K1BHUg-iRYYOu2VxtQ1GHiW4cW4mScKmi0GKsnLgHVlRhEyarq_T1eKdD_0jWJClqppFXgwUdn1R-4EwCmjBsfGyCGkay4y8sOLYeCii4z_cx6wdVXlAaiItyc4DtoEONKo6039vErrDX4RaZaArVOu-Ssvzwkq1mw0BctJ5gM4f9n7TSGU3sKcDoe6Z2ltABhO59lGJcDmkIxeA",
						"key": "api-key"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <BannerIdentity xmlns=\"urn:sungardhe:banner:identity:1.0\">\n         <sourcedid>\n            <source>Banner</source>\n            <id>1354077</id>\n         </sourcedid>\n         <operation>UPDATE</operation>\n         <attributes>\n            <attribute>\n               <name>OBJECT_IDENTIFIER</name>\n               <value>SATURN.SORTEST</value>\n            </attribute>\n            <attribute>\n               <name>SORTEST_PIDM</name>\n               <value>1354077</value>\n            </attribute>\n            <attribute>\n               <name>SORTEST_TESC_CODE</name>\n               <value>OPAL</value>\n            </attribute>\n            <attribute>\n               <name>SORTEST_TEST_DATE</name>\n               <value>14-AUG-18</value>\n            </attribute>\n         </attributes>\n      </BannerIdentity>\n   </soapenv:Body>\n</soapenv:Envelope>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": "https://3925f71d-8ea0-4371-902c-0b7bee69fe14-dev.dv.dvy.choreoapis.dev/standalone-integration/banner-to-sfdc-test-score/v1.0/services/DVU_BannerToSFDCTestScoresAQ"
			},
			"response": []
		},
		{
			"name": "Token Service",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 2000ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/xml\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/xml\");",
							"});",
							"",
							"",
							"pm.test(\"ChecklistResponse object has the expected structure\", function () {",
							"    const responseData = xml2Json(pm.response.text());",
							"    ",
							"    pm.expect(responseData.ChecklistResponse).to.be.an('object');",
							"    pm.expect(responseData.ChecklistResponse.$).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.ChecklistResponse.status).to.exist;",
							"    pm.expect(responseData.ChecklistResponse.errorCode).to.exist;",
							"    pm.expect(responseData.ChecklistResponse.errorDesc).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Status, errorCode, and errorDesc are present in the response\", function () {",
							"    const responseData = xml2Json(pm.response.text());",
							"    ",
							"",
							"    pm.expect(responseData.ChecklistResponse.status).to.eql('Skip');",
							"    pm.expect(responseData.ChecklistResponse.errorCode).to.exist;",
							"    pm.expect(responseData.ChecklistResponse.errorDesc).to.eql('Invalid Test Codes, not in accepted Maxtrix list or MCAN test.');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": {
						"clientSecret": "CmM1W9n4i_YdHJL1dGEr352SDkHmztEWTEoNq_eIDuga",
						"clientId": "4e_jGvtW5RrfENlvaG9k2zRM6YAa",
						"refreshTokenUrl": "https://api.asgardeo.io/t/devryuniversity/oauth2/revoke",
						"client_authentication": "header",
						"accessTokenUrl": "https://api.asgardeo.io/t/devryuniversity/oauth2/token",
						"grant_type": "client_credentials",
						"addTokenTo": "header"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <BannerIdentity xmlns=\"urn:sungardhe:banner:identity:1.0\">\n         <sourcedid>\n            <source>Banner</source>\n            <id>1354077</id>\n         </sourcedid>\n         <operation>UPDATE</operation>\n         <attributes>\n            <attribute>\n               <name>OBJECT_IDENTIFIER</name>\n               <value>SATURN.SORTEST</value>\n            </attribute>\n            <attribute>\n               <name>SORTEST_PIDM</name>\n               <value>1354077</value>\n            </attribute>\n            <attribute>\n               <name>SORTEST_TESC_CODE</name>\n               <value>OPAL</value>\n            </attribute>\n            <attribute>\n               <name>SORTEST_TEST_DATE</name>\n               <value>14-AUG-18</value>\n            </attribute>\n         </attributes>\n      </BannerIdentity>\n   </soapenv:Body>\n</soapenv:Envelope>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": "https://3925f71d-8ea0-4371-902c-0b7bee69fe14-dev.dv.dvy.choreoapis.dev/standalone-integration/banner-to-sfdc-test-score/v1.0/services/DVU_BannerToSFDCTestScoresAQ"
			},
			"response": []
		}
	]
}